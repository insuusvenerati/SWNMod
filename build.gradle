/*
 *  
 *
 */

import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}



apply plugin : 'net.minecraftforge.gradle.forge'

version
group= "com.stiforr.swnmod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "swnmod"

def mod_id = "swnmod"
def mod_name = "SWNMod"
def mod_desc = "Star Wars"
def mod_url = "https://github.com/insuusvenerati/SWNMod"
def mc_version = minecraft.version
def mod_version = "0.0.1"
def mcversion = "1.8.9"

minecraft {
    version = "1.8.9-11.15.1.1855"
    runDir = "run"




    replace "@ID@", mod_id
    replace "@NAME@", mod_name
    replace "${version}":project.version
    replace "${mcversion}":minecraft.version
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_22"
}


task incrementPatch << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementPatch - Incrementing Patch Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def build = Integer.parseInt(matcherVersion.group(4))


        oldVersion = major + "." + minor + "." + patch + "." + build
        newVersion = major + "." + minor + "." + (patch + 1)
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + (patch + 1)
    }

    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}

task incrementMinor << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementMinor - Incrementing Minor Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def build = Integer.parseInt(matcherVersion.group(4))


        oldVersion = major + "." + minor + "." + patch + "." + build
        newVersion = major + "." + (minor + 1) + ".0"
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + (minor + 1) + ".0"
    }

    println(":incrementMinor - Current Version: " + oldVersion)
    println(":incrementMinor - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}

task incrementMajor << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    println(":incrementMajor - Incrementing Major Version ...")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def build = Integer.parseInt(matcherVersion.group(4))


        oldVersion = major + "." + minor + "." + patch + "." + build
        newVersion = (major + 1) + ".0.0"
    }
    else {
        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = (major + 1) + ".0.0"
    }

    println(":incrementMinor - Current Version: " + oldVersion)
    println(":incrementMinor - New Version:     " + newVersion)
    project.version = newVersion

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>false</isDev>")
    configFile.write(configIsDev)
}

task setDevVersion << {
    String oldVersion
    String newVersion
    Matcher matcherVersion

    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
    def matcherDev = patternDev.matcher(configText)
    matcherDev.find()
    def isDev = Boolean.parseBoolean(matcherDev.group(1))

    if(isDev) {
        println(":setDevVersion - Incrementing Dev Version")

        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))
        def build = Integer.parseInt(matcherVersion.group(4))


        oldVersion = major + "." + minor + "." + patch + "." + build
        newVersion = major + "." + minor + "." + patch + "." + (build + 1)

    }
    else {
        println(":setDevVersion - Setting to Dev Version")

        def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
        matcherVersion = pattern.matcher(configText)
        matcherVersion.find()

        def major = Integer.parseInt(matcherVersion.group(1))
        def minor = Integer.parseInt(matcherVersion.group(2))
        def patch = Integer.parseInt(matcherVersion.group(3))

        oldVersion = major + "." + minor + "." + patch
        newVersion = major + "." + minor + "." + patch + "." + "1"
    }

    println(":incrementPatch - Current Version: " + oldVersion)
    println(":incrementPatch - New Version:     " + newVersion)
    project.version = newVersion
    mod_version = project.version

    def configVersion = matcherVersion.replaceAll("<version>"+ newVersion +"</version>")
    matcherDev = patternDev.matcher(configVersion)
    matcherDev.find()
    def configIsDev = matcherDev.replaceAll("<isDev>true</isDev>")
    configFile.write(configIsDev)
    mod_version = configVersion

}

task getModData << {
    println(":getModData - Getting mod-related data from config")
    def configFile = file("config.xml")
    def configText = configFile.getText()

    def patternModid = Pattern.compile("<modid>(\\p{Print}+)</modid>")
    def patternMcVersion = Pattern.compile("<mcversion>(\\p{Print}+)</mcversion>")
    def patternGroup = Pattern.compile("<group>(\\p{Graph}+)</group>")

    def matcherModid = patternModid.matcher(configText)
    def matcherMcVersion = patternMcVersion.matcher(configText)
    def matcherGroup = patternGroup.matcher(configText)
    matcherModid.find()
    matcherMcVersion.find()
    matcherGroup.find()

    def configModid = matcherModid.group(1)
    def configMcVersion = matcherMcVersion.group(1)
    def configGroup = matcherGroup.group(1)

    println(":getModData - ModID:      " + configModid)
    println(":getModData - MC-Version: " + configMcVersion)
    println(":getModData - Group:      " + configGroup)

    project.archivesBaseName = configModid + "-" + configMcVersion
    println(project.archivesBaseName)
    project.group = configGroup
}

processResources
        {
            Matcher matcher

            def configFile = file("config.xml")
            def configText = configFile.getText()

            def patternDev = Pattern.compile("<isDev>(\\w+)</isDev>")
            def matcherDev = patternDev.matcher(configText)
            matcherDev.find()
            def isDev = Boolean.parseBoolean(matcherDev.group(1))

            if(isDev) {
                def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)</version>")
                matcher = pattern.matcher(configText)
                matcher.find()

                def major = Integer.parseInt(matcher.group(1))
                def minor = Integer.parseInt(matcher.group(2))
                def patch = Integer.parseInt(matcher.group(3))
                def build = Integer.parseInt(matcher.group(4))


                project.version = mcversion + "-" + major + "." + minor + "." + patch + "." + build
            }
            else {
                def pattern = Pattern.compile("<version>(\\d+)\\.(\\d+)\\.(\\d+)</version>")
                matcher = pattern.matcher(configText)
                matcher.find()

                def major = Integer.parseInt(matcher.group(1))
                def minor = Integer.parseInt(matcher.group(2))
                def patch = Integer.parseInt(matcher.group(3))

                project.version = mcversion + "-" + major + "." + minor + "." + patch
            }


            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                // replace version and mcversion
                expand 'id': mod_id, 'name': mod_name, 'description': mod_desc, 'url': mod_url, 'version': project.version, 'mcversion': mc_version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = true
    }
}


/*sourceSets {
    main { output.resourcesDir = output.classesDir }
}*/
